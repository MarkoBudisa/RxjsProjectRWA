/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])})(t,e)};function t(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function e(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(n,u)}catch(n){i=[6,n],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function r(n){var t="function"==typeof Symbol&&Symbol.iterator,e=t&&n[t],r=0;if(e)return e.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(n,t){var e="function"==typeof Symbol&&n[Symbol.iterator];if(!e)return n;var r,o,i=e.call(n),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function i(n,t){for(var e=0,r=t.length,o=n.length;e<r;e++,o++)n[o]=t[e];return n}function u(n){return this instanceof u?(this.v=n,this):new u(n)}function c(n,t,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(n,t||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(n){o[n]&&(r[n]=function(t){return new Promise((function(e,r){i.push([n,t,e,r])>1||s(n,t)}))})}function s(n,t){try{(e=o[n](t)).value instanceof u?Promise.resolve(e.value.v).then(a,l):f(i[0][2],e)}catch(n){f(i[0][3],n)}var e}function a(n){s("next",n)}function l(n){s("throw",n)}function f(n,t){n(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}function s(n){return"function"==typeof n}Object.create,Object.create;var a,l=((a=function(n){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(n,t){return t+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}).prototype=Object.create(Error.prototype),a.prototype.constructor=a,a);function f(n,t){if(n){var e=n.indexOf(t);0<=e&&n.splice(e,1)}}var d=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._teardowns=null}return n.prototype.unsubscribe=function(){var n,t,e,u,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var f=r(a),d=f.next();!d.done;d=f.next())d.value.remove(this)}catch(t){n={error:t}}finally{try{d&&!d.done&&(t=f.return)&&t.call(f)}finally{if(n)throw n.error}}else a.remove(this);var h=this.initialTeardown;if(s(h))try{h()}catch(n){c=n instanceof l?n.errors:[n]}var v=this._teardowns;if(v){this._teardowns=null;try{for(var b=r(v),y=b.next();!y.done;y=b.next()){var m=y.value;try{p(m)}catch(n){c=null!=c?c:[],n instanceof l?c=i(i([],o(c)),o(n.errors)):c.push(n)}}}catch(n){e={error:n}}finally{try{y&&!y.done&&(u=b.return)&&u.call(b)}finally{if(e)throw e.error}}}if(c)throw new l(c)}},n.prototype.add=function(t){var e;if(t&&t!==this)if(this.closed)p(t);else{if(t instanceof n){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(e=this._teardowns)&&void 0!==e?e:[]).push(t)}},n.prototype._hasParent=function(n){var t=this._parentage;return t===n||Array.isArray(t)&&t.includes(n)},n.prototype._addParent=function(n){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(n),t):t?[t,n]:n},n.prototype._removeParent=function(n){var t=this._parentage;t===n?this._parentage=null:Array.isArray(t)&&f(t,n)},n.prototype.remove=function(t){var e=this._teardowns;e&&f(e,t),t instanceof n&&t._removeParent(this)},n.EMPTY=((t=new n).closed=!0,t),n;var t}();function h(n){return n instanceof d||n&&"closed"in n&&s(n.remove)&&s(n.add)&&s(n.unsubscribe)}function p(n){s(n)?n():n.unsubscribe()}d.EMPTY;var v=null,b=null,y=void 0,m=!1,g=!1,w={setTimeout:function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=w.delegate;return((null==e?void 0:e.setTimeout)||setTimeout).apply(void 0,i([],o(n)))},clearTimeout:function(n){var t=w.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(n)},delegate:void 0};function x(n){w.setTimeout((function(){if(!v)throw n;v(n)}))}function _(){}var C=E("C",void 0,void 0);function E(n,t,e){return{kind:n,value:t,error:e}}var L=function(n){function e(t){var e=n.call(this)||this;return e.isStopped=!1,t?(e.destination=t,h(t)&&t.add(e)):e.destination=T,e}return t(e,n),e.create=function(n,t,e){return new I(n,t,e)},e.prototype.next=function(n){this.isStopped?k(function(n){return E("N",n,void 0)}(n),this):this._next(n)},e.prototype.error=function(n){this.isStopped?k(E("E",void 0,n),this):(this.isStopped=!0,this._error(n))},e.prototype.complete=function(){this.isStopped?k(C,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(n){this.destination.next(n)},e.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(d),I=function(n){function e(t,e,r){var o,i=n.call(this)||this;if(s(t))o=t;else if(t){var u;o=t.next,e=t.error,r=t.complete,i&&g?(u=Object.create(t)).unsubscribe=function(){return i.unsubscribe()}:u=t,o=null==o?void 0:o.bind(u),e=null==e?void 0:e.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?S(o,i):_,error:S(null!=e?e:M,i),complete:r?S(r,i):_},i}return t(e,n),e}(L);function S(n,t){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{n.apply(void 0,i([],o(e)))}catch(n){if(m){if(!t._syncErrorHack_isSubscribing)throw n;t.__syncError=n}else x(n)}}}function M(n){throw n}function k(n,t){var e=b;e&&w.setTimeout((function(){return e(n,t)}))}var T={closed:!0,next:_,error:M,complete:_},A="function"==typeof Symbol&&Symbol.observable||"@@observable";function O(n){return n}function P(n){return 0===n.length?O:1===n.length?n[0]:function(t){return n.reduce((function(n,t){return t(n)}),t)}}var j=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(t){var e=new n;return e.source=this,e.operator=t,e},n.prototype.subscribe=function(n,t,e){var r,o=(r=n)&&r instanceof L||function(n){return n&&s(n.next)&&s(n.error)&&s(n.complete)}(r)&&h(r)?n:new I(n,t,e);if(m)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,u=this.source;o.add(i?i.call(o,u):u?this._subscribe(o):this._trySubscribe(o))}return o},n.prototype._deprecatedSyncErrorSubscribe=function(n){var t=n;t._syncErrorHack_isSubscribing=!0;var e=this.operator;if(e)n.add(e.call(n,this.source));else try{n.add(this._subscribe(n))}catch(n){t.__syncError=n}for(var r=t;r;){if("__syncError"in r)try{throw r.__syncError}finally{n.unsubscribe()}r=r.destination}t._syncErrorHack_isSubscribing=!1},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(t){n.error(t)}},n.prototype.forEach=function(n,t){var e=this;return new(t=H(t))((function(t,r){var o;o=e.subscribe((function(t){try{n(t)}catch(n){r(n),null==o||o.unsubscribe()}}),r,t)}))},n.prototype._subscribe=function(n){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(n)},n.prototype[A]=function(){return this},n.prototype.pipe=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return n.length?P(n)(this):this},n.prototype.toPromise=function(n){var t=this;return new(n=H(n))((function(n,e){var r;t.subscribe((function(n){return r=n}),(function(n){return e(n)}),(function(){return n(r)}))}))},n.create=function(t){return new n(t)},n}();function H(n){var t;return null!==(t=null!=n?n:y)&&void 0!==t?t:Promise}var $=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function N(n){return s(null==n?void 0:n.then)}function B(n,t){return new j((function(e){var r=0;return t.schedule((function(){r===n.length?e.complete():(e.next(n[r++]),e.closed||this.schedule())}))}))}var F="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function W(n,t){if(!n)throw new Error("Iterable cannot be null");return new j((function(e){var r=new d;return r.add(t.schedule((function(){var o=n[Symbol.asyncIterator]();r.add(t.schedule((function(){var n=this;o.next().then((function(t){t.done?e.complete():(e.next(t.value),n.schedule())}))})))}))),r}))}function Y(n){return s(n[A])}function D(n){return s(null==n?void 0:n[F])}function R(n){return Symbol.asyncIterator&&s(null==n?void 0:n[Symbol.asyncIterator])}function q(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function z(n){return c(this,arguments,(function(){var t,r,o;return e(this,(function(e){switch(e.label){case 0:t=n.getReader(),e.label=1;case 1:e.trys.push([1,,9,10]),e.label=2;case 2:return[4,u(t.read())];case 3:return r=e.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,e.sent()];case 5:return[4,u(o)];case 6:return[4,e.sent()];case 7:return e.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function U(n){return s(null==n?void 0:n.getReader)}function G(n,t){return t?function(n,t){if(null!=n){if(Y(n))return function(n,t){return new j((function(e){var r=new d;return r.add(t.schedule((function(){var o=n[A]();r.add(o.subscribe({next:function(n){r.add(t.schedule((function(){return e.next(n)})))},error:function(n){r.add(t.schedule((function(){return e.error(n)})))},complete:function(){r.add(t.schedule((function(){return e.complete()})))}}))}))),r}))}(n,t);if($(n))return B(n,t);if(N(n))return function(n,t){return new j((function(e){return t.schedule((function(){return n.then((function(n){e.add(t.schedule((function(){e.next(n),e.add(t.schedule((function(){return e.complete()})))})))}),(function(n){e.add(t.schedule((function(){return e.error(n)})))}))}))}))}(n,t);if(R(n))return W(n,t);if(D(n))return function(n,t){return new j((function(e){var r;return e.add(t.schedule((function(){r=n[F](),function(n,t,e,r){void 0===r&&(r=0);var o=t.schedule((function(){try{e.call(this)}catch(t){n.error(t)}}),r);n.add(o)}(e,t,(function(){var n=r.next(),t=n.value;n.done?e.complete():(e.next(t),this.schedule())}))}))),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(n,t);if(U(n))return function(n,t){return W(z(n),t)}(n,t)}throw q(n)}(n,t):X(n)}function X(n){if(n instanceof j)return n;if(null!=n){if(Y(n))return o=n,new j((function(n){var t=o[A]();if(s(t.subscribe))return t.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if($(n))return J(n);if(N(n))return e=n,new j((function(n){e.then((function(t){n.closed||(n.next(t),n.complete())}),(function(t){return n.error(t)})).then(null,x)}));if(R(n))return K(n);if(D(n))return t=n,new j((function(n){var e,o;try{for(var i=r(t),u=i.next();!u.done;u=i.next()){var c=u.value;if(n.next(c),n.closed)return}}catch(n){e={error:n}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(e)throw e.error}}n.complete()}));if(U(n))return K(z(n))}var t,e,o;throw q(n)}function J(n){return new j((function(t){for(var e=0;e<n.length&&!t.closed;e++)t.next(n[e]);t.complete()}))}function K(n){return new j((function(t){(function(n,t){var o,i,u,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return e(this,(function(e){switch(e.label){case 0:e.trys.push([0,5,6,11]),o=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,e=n[Symbol.asyncIterator];return e?e.call(n):(n=r(n),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(e){t[e]=n[e]&&function(t){return new Promise((function(r,o){!function(n,t,e,r){Promise.resolve(r).then((function(t){n({value:t,done:e})}),t)}(r,o,(t=n[e](t)).done,t.value)}))}}}(n),e.label=1;case 1:return[4,o.next()];case 2:if((i=e.sent()).done)return[3,4];if(s=i.value,t.next(s),t.closed)return[2];e.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=e.sent(),u={error:a},[3,11];case 6:return e.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:e.sent(),e.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(n,t){function e(n){try{o(f.next(n))}catch(n){t(n)}}function r(n){try{o(f.throw(n))}catch(n){t(n)}}function o(t){var o;t.done?n(t.value):(o=t.value,o instanceof l?o:new l((function(n){n(o)}))).then(e,r)}o((f=f.apply(s,a||[])).next())}))})(n,t).catch((function(n){return t.error(n)}))}))}var Q=Array.isArray;function V(n){return 1===n.length&&Q(n[0])?n[0]:n}var Z=function(n){function e(t,e,r,o,i){var u=n.call(this,t)||this;return u.onFinalize=i,u._next=e?function(n){try{e(n)}catch(n){t.error(n)}}:n.prototype._next,u._error=o?function(n){try{o(n)}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._error,u._complete=r?function(){try{r()}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,u}return t(e,n),e.prototype.unsubscribe=function(){var t,e=this.closed;n.prototype.unsubscribe.call(this),!e&&(null===(t=this.onFinalize)||void 0===t||t.call(this))},e}(L);function nn(n){return function(t){for(var e=[],r=function(r){e.push(X(n[r]).subscribe(new Z(t,(function(n){if(e){for(var o=0;o<e.length;o++)o!==r&&e[o].unsubscribe();e=null}t.next(n)}))))},o=0;e&&!t.closed&&o<n.length;o++)r(o)}}var tn=Array.isArray,en=Object.getPrototypeOf,rn=Object.prototype,on=Object.keys;function un(n){if(1===n.length){var t=n[0];if(tn(t))return{args:t,keys:null};if((r=t)&&"object"==typeof r&&en(r)===rn){var e=on(t);return{args:e.map((function(n){return t[n]})),keys:e}}}var r;return{args:n,keys:null}}function cn(n){return n&&s(n.schedule)}function sn(n){return n[n.length-1]}function an(n){return s(sn(n))?n.pop():void 0}function ln(n){return cn(sn(n))?n.pop():void 0}function fn(n,t){return"number"==typeof sn(n)?n.pop():t}function dn(n){return function(t){if(function(n){return s(null==n?void 0:n.lift)}(t))return t.lift((function(t){try{return n(t,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function hn(n,t){return dn((function(e,r){var o=0;e.subscribe(new Z(r,(function(e){r.next(n.call(t,e,o++))})))}))}var pn=Array.isArray;function vn(n){return hn((function(t){return function(n,t){return pn(t)?n.apply(void 0,i([],o(t))):n(t)}(n,t)}))}function bn(n,t){return n.reduce((function(n,e,r){return n[e]=t[r],n}),{})}function yn(n,t,e){return void 0===e&&(e=1/0),s(t)?yn((function(e,r){return hn((function(n,o){return t(e,n,r,o)}))(X(n(e,r)))}),e):("number"==typeof t&&(e=t),dn((function(t,r){return function(n,t,e,r,o,i,u,c){var s=[],a=0,l=0,f=!1,d=function(){!f||s.length||a||t.complete()},h=function(n){return a<r?p(n):s.push(n)},p=function(n){a++;var o=!1;X(e(n,l++)).subscribe(new Z(t,(function(n){t.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)n=void 0,n=s.shift(),p(n);d()}catch(n){t.error(n)}var n})))};return n.subscribe(new Z(t,h,(function(){f=!0,d()}))),function(){}}(t,r,n,e)})))}function mn(n,t){return t?B(n,t):J(n)}var gn=["addListener","removeListener"],wn=["addEventListener","removeEventListener"],xn=["on","off"];function _n(n,t,e,r){if(s(e)&&(r=e,e=void 0),r)return _n(n,t,e).pipe(vn(r));var i=o(function(n){return s(n.addEventListener)&&s(n.removeEventListener)}(n)?wn.map((function(r){return function(o){return n[r](t,o,e)}})):function(n){return s(n.addListener)&&s(n.removeListener)}(n)?gn.map(Cn(n,t)):function(n){return s(n.on)&&s(n.off)}(n)?xn.map(Cn(n,t)):[],2),u=i[0],c=i[1];if(!u&&$(n))return yn((function(n){return _n(n,t,e)}))(mn(n));if(!u)throw new TypeError("Invalid event target");return new j((function(n){var t=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1<t.length?t:t[0])};return u(t),function(){return c(t)}}))}function Cn(n,t){return function(e){return function(r){return n[e](t,r)}}}var En=function(n){function e(t,e){return n.call(this)||this}return t(e,n),e.prototype.schedule=function(n,t){return void 0===t&&(t=0),this},e}(d),Ln={setInterval:function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=Ln.delegate;return((null==e?void 0:e.setInterval)||setInterval).apply(void 0,i([],o(n)))},clearInterval:function(n){var t=Ln.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(n)},delegate:void 0},In=function(n){function e(t,e){var r=n.call(this,t,e)||this;return r.scheduler=t,r.work=e,r.pending=!1,r}return t(e,n),e.prototype.schedule=function(n,t){if(void 0===t&&(t=0),this.closed)return this;this.state=n;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},e.prototype.requestAsyncId=function(n,t,e){return void 0===e&&(e=0),Ln.setInterval(n.flush.bind(n,this),e)},e.prototype.recycleAsyncId=function(n,t,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return t;Ln.clearInterval(t)},e.prototype.execute=function(n,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(n,t);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(n,t){var e,r=!1;try{this.work(n)}catch(n){r=!0,e=!!n&&n||new Error(n)}if(r)return this.unsubscribe(),e},e.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},e}(En),Sn={now:function(){return(Sn.delegate||Date).now()},delegate:void 0},Mn=function(){function n(t,e){void 0===e&&(e=n.now),this.schedulerActionCtor=t,this.now=e}return n.prototype.schedule=function(n,t,e){return void 0===t&&(t=0),new this.schedulerActionCtor(this,n).schedule(e,t)},n.now=Sn.now,n}(),kn=new(function(n){function e(t,e){void 0===e&&(e=Mn.now);var r=n.call(this,t,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return t(e,n),e.prototype.flush=function(n){var t=this.actions;if(this._active)t.push(n);else{var e;this._active=!0;do{if(e=n.execute(n.state,n.delay))break}while(n=t.shift());if(this._active=!1,e){for(;n=t.shift();)n.unsubscribe();throw e}}},e}(Mn))(In),Tn=kn;function An(n,t,e){void 0===n&&(n=0),void 0===e&&(e=Tn);var r=-1;return null!=t&&(cn(t)?e=t:r=t),new j((function(t){var o,i=(o=n)instanceof Date&&!isNaN(o)?+n-e.now():n;i<0&&(i=0);var u=0;return e.schedule((function(){t.closed||(t.next(u++),0<=r?this.schedule(void 0,r):t.complete())}),i)}))}function On(n,t){return void 0===n&&(n=0),void 0===t&&(t=kn),n<0&&(n=0),An(n,n,t)}function Pn(n){return void 0===n&&(n=1/0),yn(O,n)}function jn(){return Pn(1)}function Hn(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return jn()(mn(n,ln(n)))}var $n=new j((function(n){return n.complete()}));function Nn(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=an(n),r=V(n);return r.length?new j((function(n){var t=r.map((function(){return[]})),u=r.map((function(){return!1}));n.add((function(){t=u=null}));for(var c=function(c){X(r[c]).subscribe(new Z(n,(function(r){if(t[c].push(r),t.every((function(n){return n.length}))){var s=t.map((function(n){return n.shift()}));n.next(e?e.apply(void 0,i([],o(s))):s),t.some((function(n,t){return!n.length&&u[t]}))&&n.complete()}}),(function(){u[c]=!0,!t[c].length&&n.complete()})))},s=0;!n.closed&&s<r.length;s++)c(s);return function(){t=u=null}})):$n}function Bn(n){return n<=0?function(){return $n}:dn((function(t,e){var r=0;t.subscribe(new Z(e,(function(t){++r<=n&&(e.next(t),n<=r&&e.complete())})))}))}function Fn(n,t){return t?function(e){return Hn(t.pipe(Bn(1),dn((function(n,t){n.subscribe(new Z(t,_))}))),e.pipe(Fn(n)))}:yn((function(t,e){return n(t,e).pipe(Bn(1),function(n){return hn((function(){return n}))}(t))}))}function Wn(n,t){void 0===t&&(t=kn);var e=An(n,t);return Fn((function(){return e}))}class Yn{constructor(n,t,e,r,o,i,u,c,s){this.flightId=n,this.fromLocation=t,this.toLocation=e,this.dateOfStart=r,this.company=o,this.numberOfPassengersInClassA=i,this.numberOfPassengersInClassB=u,this.numberOfPassengersInClassC=c,this.theWayOfEnter=s}}let Dn=[],Rn=[];function qn(n,t,e,r,o,i,u){const c=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=ln(n),r=fn(n,1/0),o=n;return o.length?1===o.length?X(o[0]):Pn(r)(mn(o,e)):$n}(On(Math.round(1500*Math.random())+500).pipe(Bn(o.options[o.selectedIndex].value),hn((n=>n+100))),On(Math.round(1800*Math.random())+400).pipe(Bn(i.options[i.selectedIndex].value),hn((n=>n+200))),On(Math.round(2e3*Math.random())+300).pipe(Bn(u.options[u.selectedIndex].value),hn((n=>n+300))));return c.subscribe((n=>{n<200?t[n-100].style.backgroundColor="green":n>=200&&n<300?e[n-200].style.backgroundColor="blue":n>=300&&(r[n-300].style.backgroundColor="red")})),Dn.push(c),new Yn(n.id,n.fromLocation,n.toLocation,n.dateOfStart,n.company,o.options[o.selectedIndex].value,i.options[i.selectedIndex].value,u.options[u.selectedIndex].value,"Passengers go out class by class")}function zn(n,t,e,r,o,i,u){const c=Nn(On(Math.round(1500*Math.random())+500).pipe(Bn(o.options[o.selectedIndex].value)),On(Math.round(1800*Math.random())+650).pipe(Bn(i.options[i.selectedIndex].value)),On(Math.round(2e3*Math.random())+800).pipe(Bn(u.options[u.selectedIndex].value)));return c.subscribe((n=>{t[n[0]].style.backgroundColor="green",e[n[1]].style.backgroundColor="blue",r[n[2]].style.backgroundColor="red"})),Dn.push(c),new Yn(n.id,n.fromLocation,n.toLocation,n.dateOfStart,n.company,o.options[o.selectedIndex].value,i.options[i.selectedIndex].value,u.options[u.selectedIndex].value,"Passenger go out one from all classes")}let Un,Gn,Xn=0,Jn=[],Kn=[];function Qn(n,t){const e=document.createElement("select");e.classList.add("select-number-passengers");for(let t=1;t<=n;t++){const n=document.createElement("option");n.value=t.toString(),n.innerHTML=t.toString(),e.appendChild(n)}return t.appendChild(e),e}function Vn(n,t){let e=[];const r=document.createElement("div");r.classList.add("class-box"),n.appendChild(r);for(let n=0;n<t;n++){const n=document.createElement("div");n.classList.add("seat"),r.appendChild(n),e.push(n)}return e}!function(n){!function(n){const t=document.createElement("div");t.classList.add("main-box-search"),n.appendChild(t);const e=document.createElement("button");e.innerHTML="X",e.classList.add("close-button"),e.onclick=n=>{t.style.display="none"},t.appendChild(e);const r=document.createElement("label");r.innerHTML="Search flight from your destination",r.classList.add("label-search"),t.appendChild(r);const o=document.createElement("label");o.innerHTML="Company: ",t.appendChild(o);const i=document.createElement("select");i.classList.add("selector"),t.appendChild(i),G(fetch("http://localhost:3000/companies").then((n=>{if(n.ok)return n.json();throw new Error("No companies")})).catch((n=>console.log(n)))).subscribe((n=>n.map((n=>{!function(n,t){if(!t)return;const e=document.createElement("option");e.value=t.name,e.innerHTML=t.name,n.appendChild(e)}(i,n)}))));const u=document.createElement("input");u.classList.add("search-box"),t.appendChild(u);const c=document.createElement("div");var s,a,l;c.classList.add("results-box"),t.appendChild(c),_n(u,"input").pipe((1e3,void 0===l&&(l=kn),dn((function(n,t){var e=null,r=null,o=null,i=function(){if(e){e.unsubscribe(),e=null;var n=r;r=null,t.next(n)}};function u(){var n=o+1e3,t=l.now();t<n?e=this.schedule(void 0,n-t):i()}n.subscribe(new Z(t,(function(n){r=n,o=l.now(),e||(e=l.schedule(u,1e3))}),(function(){i(),t.complete()}),void 0,(function(){r=e=null})))}))),hn((n=>n.target.value)),(a=n=>n.length>=2,dn((function(n,t){var e=0;n.subscribe(new Z(t,(function(n){return a.call(undefined,n,e++)&&t.next(n)})))}))),(s=n=>function(n,t){for(;t.firstChild;)t.removeChild(t.firstChild);return G(fetch("http://localhost:3000/flights/?fromLocation="+n).then((n=>{if(n.ok)return n.json();throw new Error("Location not found")})).catch((n=>console.log(n))))}(n,c),dn((function(n,t){var e=null,r=!1,o=function(){return r&&!e&&t.complete()};n.subscribe(new Z(t,(function(n){null==e||e.unsubscribe();0;X(s(n)).subscribe(e=new Z(t,(function(n){return t.next(n)}),(function(){e=null,o()})))}),(function(){r=!0,o()})))}))),hn((n=>n.filter((n=>n.company.name===i.options[i.selectedIndex].value))))).subscribe((n=>n.map((n=>function(n,t){if(!t)return;const e=document.createElement("label");e.innerHTML=`Company: ${t.company.name} Airplane: ${t.airplane.name} From: \n        ${t.fromLocation} To: ${t.toLocation} Date: ${t.dateOfStart}`,e.classList.add("flight-info"),e.onclick=n=>{Kn.includes(t.id)?alert("Already selected that flight"):(Xn++,function(n){const t=document.getElementsByClassName("go-in-simulator-box")[0];let e=[];const r=Qn(n.airplane.capacityClassA,t);e.push(r);const o=Qn(n.airplane.capacityClassB,t);e.push(o);const i=Qn(n.airplane.capacityClassC,t);e.push(i);const u=function(n){const t=document.createElement("select");t.classList.add("select-way-of-enter");const e=document.createElement("option");e.innerHTML="One passenger at the time",e.value="One",t.appendChild(e);const r=document.createElement("option");return r.innerHTML="Wait for one from each class",r.value="All",t.appendChild(r),n.appendChild(t),t}(t),c=document.createElement("div");c.classList.add("plane-view"),t.appendChild(c);let s=[];const a=Vn(c,n.airplane.capacityClassA);s.push(a);const l=Vn(c,n.airplane.capacityClassB);s.push(l);const f=Vn(c,n.airplane.capacityClassC);s.push(f),Jn.push(n),Jn.push(s),Jn.push(e),Jn.push(u),Un.onclick=n=>{for(let n=0;n<Xn;n++)"One"===Jn[3+4*n].options[Jn[3+4*n].selectedIndex].value?Rn.push(qn(Jn[0+4*n],Jn[1+4*n][0],Jn[1+4*n][1],Jn[1+4*n][2],Jn[2+4*n][0],Jn[2+4*n][1],Jn[2+4*n][2])):"All"===Jn[3+4*n].options[Jn[3+4*n].selectedIndex].value&&Rn.push(zn(Jn[0+4*n],Jn[1+4*n][0],Jn[1+4*n][1],Jn[1+4*n][2],Jn[2+4*n][0],Jn[2+4*n][0],Jn[2+4*n][0]));var t;Un.disabled=!0,function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=an(n),r=un(n),o=r.args,i=r.keys,u=new j((function(n){var t=o.length;if(t)for(var e=new Array(t),r=t,u=t,c=function(t){var c=!1;X(o[t]).subscribe(new Z(n,(function(n){c||(c=!0,u--),e[t]=n}),(function(){--r&&c||(u||n.next(i?bn(i,e):e),n.complete())})))},s=0;s<t;s++)c(s);else n.complete()}));return e?u.pipe(vn(e)):u}(Dn).pipe((t=()=>{document.getElementsByClassName("start-flights-button")[0].disabled=!1},dn((function(n,e){try{n.subscribe(e)}finally{e.add(t)}})))).subscribe()};const d=document.createElement("label");d.innerHTML=`Flight number: ${n.id} Airplane:${n.airplane.name} Company: ${n.company.name} to location: ${n.toLocation}`,t.appendChild(d);const h=document.createElement("label");h.innerHTML="*Note - If you selecet all from each class, then the number of passengers in all classes will be the first selected number",h.classList.add("label-note"),t.appendChild(h)}(t),Kn.push(t.id))},n.appendChild(e)}(c,n))))),Un=document.createElement("button"),Un.innerHTML="Start go in simulation",Un.classList.add("start-simulation-button"),n.appendChild(Un),Gn=document.createElement("button"),Gn.innerHTML="Start flights simulation",Gn.classList.add("start-flights-button"),Gn.disabled=!0,n.appendChild(Gn)}(n);const t=document.createElement("div");t.classList.add("container-simulators"),n.appendChild(t);const e=document.createElement("div");e.classList.add("go-in-simulator-box"),t.appendChild(e);const r=document.createElement("div");r.classList.add("flight-simulator-box"),t.appendChild(r),function(){let n=[];Gn.onclick=t=>{for(let t=0;t<Xn;t++){const t=(e=void 0,r=void 0,new j((n=>{n.next(function(n){for(let t=n.length-1;t>0;t--){const e=Math.floor(Math.random()*(t+1)),r=n[t];n[t]=n[e],n[e]=r}return n}(Rn)),n.complete()})).pipe(Wn(Math.round(3e3*Math.random())+1500),yn((n=>G(n))),(e=n=>function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=ln(n);return e?B(n,e):mn(n)}(n).pipe(Wn(Math.round(1e3*Math.random())+500)),s(r)?yn(e,r,1):yn(e,1))));n.push(t)}var e,r;(function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return 1===(n=V(n)).length?X(n[0]):new j(nn(n))})(n).subscribe((n=>{!function(n){console.log(n);const t=document.getElementsByClassName("flight-simulator-box")[0],e=document.createElement("label");e.innerHTML=`Flight landed: ${n.flightId} company: ${n.company.name} date of start: ${n.dateOfStart} \n    landed on location: ${n.toLocation}`;const r=document.createElement("label");r.innerHTML=`Passengers go out: ${n.theWayOfEnter}`,t.appendChild(e),t.appendChild(r);const o=document.createElement("div");o.classList.add("plane-view"),t.appendChild(o);const i=Vn(o,n.numberOfPassengersInClassA),u=Vn(o,n.numberOfPassengersInClassB),c=Vn(o,n.numberOfPassengersInClassC);var s,a,l;"Passengers go out class by class"===n.theWayOfEnter?(s=i,a=u,l=c,Hn(On(Math.round(1500*Math.random())+500).pipe(Bn(s.length),hn((n=>n+100))),On(Math.round(1800*Math.random())+400).pipe(Bn(a.length),hn((n=>n+200))),On(Math.round(2e3*Math.random())+300).pipe(Bn(l.length),hn((n=>n+300)))).subscribe((n=>{n<200?s[n-100].style.backgroundColor="green":n>=200&&n<300?a[n-200].style.backgroundColor="blue":n>=300&&(l[n-300].style.backgroundColor="red")}))):function(n,t,e){Nn(On(Math.round(1500*Math.random())+500).pipe(Bn(n.length)),On(Math.round(1800*Math.random())+650).pipe(Bn(t.length)),On(Math.round(2e3*Math.random())+800).pipe(Bn(e.length))).subscribe((r=>{n[r[0]].style.backgroundColor="green",t[r[1]].style.backgroundColor="blue",e[r[2]].style.backgroundColor="red"}))}(i,u,c)}(n)})),Gn.disabled=!0}}()}(document.body)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,